apply plugin: "kotlin"
apply plugin: "net.corda.plugins.cordapp"
apply plugin: "net.corda.plugins.quasar-utils"
apply plugin: 'org.jetbrains.dokka'
cordapp {
    info {
        name "DID CorDapp Contracts"
        vendor "UNMAINTAINED"
        targetPlatformVersion corda_platform_version.toInteger()
        minimumPlatformVersion corda_platform_version.toInteger()
    }
    signing {
        enabled false
    }
}

configurations {
    modules
    compile.extendsFrom(modules)
}
dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    
    compile "com.grack:nanojson:1.1"
    compile "com.natpryce:result4k:2.0.0"

    testCompile "junit:junit:$junit_version"
    testCompile "com.natpryce:hamkrest:$hamkrest_version"

    // Corda integration dependencies
    cordaRuntime "$corda_release_group:corda:$corda_release_version"

    cordaCompile "$corda_release_group:corda-core:$corda_release_version"
    cordaCompile "$corda_release_group:corda-jackson:$corda_release_version"
    cordaCompile "$corda_release_group:corda-rpc:$corda_release_version"

    testCompile "$corda_release_group:corda-node-driver:$corda_release_version"

    //cordaCompile project(':did-envelope')
    modules project(':did-envelope')
    //compile files ('lib/did-envelope-1.0-SNAPSHOT.jar')
}


jar {
    configurations.modules.collect { it.isDirectory() ? it : zipTree(it) }
}
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        languageVersion = "1.2"
        apiVersion = "1.2"
        jvmTarget = "1.8"
        javaParameters = true   // Useful for reflection.
    }
}
task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/javadoc"
}